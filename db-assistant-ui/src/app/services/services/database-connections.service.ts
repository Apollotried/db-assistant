/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { activateConnection } from '../fn/database-connections/activate-connection';
import { ActivateConnection$Params } from '../fn/database-connections/activate-connection';
import { createAndActivateConnection } from '../fn/database-connections/create-and-activate-connection';
import { CreateAndActivateConnection$Params } from '../fn/database-connections/create-and-activate-connection';
import { DbConnectionResponse } from '../models/db-connection-response';
import { deleteConnection } from '../fn/database-connections/delete-connection';
import { DeleteConnection$Params } from '../fn/database-connections/delete-connection';
import { getActiveConnection } from '../fn/database-connections/get-active-connection';
import { GetActiveConnection$Params } from '../fn/database-connections/get-active-connection';
import { getSchema } from '../fn/database-connections/get-schema';
import { GetSchema$Params } from '../fn/database-connections/get-schema';
import { listConnections } from '../fn/database-connections/list-connections';
import { ListConnections$Params } from '../fn/database-connections/list-connections';
import { SchemaResponseDto } from '../models/schema-response-dto';
import { testConnection } from '../fn/database-connections/test-connection';
import { TestConnection$Params } from '../fn/database-connections/test-connection';
import { TestConnectionResponse } from '../models/test-connection-response';


/**
 * Manage and activate user database connections
 */
@Injectable({ providedIn: 'root' })
export class DatabaseConnectionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listConnections()` */
  static readonly ListConnectionsPath = '/db';

  /**
   * List saved database connections.
   *
   * Retrieves all database connections saved by the authenticated user. Does not include passwords, but contains metadata such as name, host, port, and type.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listConnections()` instead.
   *
   * This method doesn't expect any request body.
   */
  listConnections$Response(params?: ListConnections$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DbConnectionResponse>>> {
    return listConnections(this.http, this.rootUrl, params, context);
  }

  /**
   * List saved database connections.
   *
   * Retrieves all database connections saved by the authenticated user. Does not include passwords, but contains metadata such as name, host, port, and type.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listConnections$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listConnections(params?: ListConnections$Params, context?: HttpContext): Observable<Array<DbConnectionResponse>> {
    return this.listConnections$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DbConnectionResponse>>): Array<DbConnectionResponse> => r.body)
    );
  }

  /** Path part for operation `createAndActivateConnection()` */
  static readonly CreateAndActivateConnectionPath = '/db';

  /**
   * Create and activate a database connection.
   *
   * Stores a new database connection configuration for the authenticated user and immediately activates it.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAndActivateConnection()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAndActivateConnection$Response(params: CreateAndActivateConnection$Params, context?: HttpContext): Observable<StrictHttpResponse<DbConnectionResponse>> {
    return createAndActivateConnection(this.http, this.rootUrl, params, context);
  }

  /**
   * Create and activate a database connection.
   *
   * Stores a new database connection configuration for the authenticated user and immediately activates it.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAndActivateConnection$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAndActivateConnection(params: CreateAndActivateConnection$Params, context?: HttpContext): Observable<DbConnectionResponse> {
    return this.createAndActivateConnection$Response(params, context).pipe(
      map((r: StrictHttpResponse<DbConnectionResponse>): DbConnectionResponse => r.body)
    );
  }

  /** Path part for operation `activateConnection()` */
  static readonly ActivateConnectionPath = '/db/{id}/activate';

  /**
   * Activate a saved database connection.
   *
   * Activates a database connection previously saved by the authenticated user. If another connection is already active, it will be replaced.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `activateConnection()` instead.
   *
   * This method doesn't expect any request body.
   */
  activateConnection$Response(params: ActivateConnection$Params, context?: HttpContext): Observable<StrictHttpResponse<DbConnectionResponse>> {
    return activateConnection(this.http, this.rootUrl, params, context);
  }

  /**
   * Activate a saved database connection.
   *
   * Activates a database connection previously saved by the authenticated user. If another connection is already active, it will be replaced.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `activateConnection$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  activateConnection(params: ActivateConnection$Params, context?: HttpContext): Observable<DbConnectionResponse> {
    return this.activateConnection$Response(params, context).pipe(
      map((r: StrictHttpResponse<DbConnectionResponse>): DbConnectionResponse => r.body)
    );
  }

  /** Path part for operation `testConnection()` */
  static readonly TestConnectionPath = '/db/test';

  /**
   * Test a database connection.
   *
   * Tests whether the provided database connection details are correct and the database is reachable.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `testConnection()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  testConnection$Response(params: TestConnection$Params, context?: HttpContext): Observable<StrictHttpResponse<TestConnectionResponse>> {
    return testConnection(this.http, this.rootUrl, params, context);
  }

  /**
   * Test a database connection.
   *
   * Tests whether the provided database connection details are correct and the database is reachable.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `testConnection$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  testConnection(params: TestConnection$Params, context?: HttpContext): Observable<TestConnectionResponse> {
    return this.testConnection$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestConnectionResponse>): TestConnectionResponse => r.body)
    );
  }

  /** Path part for operation `getSchema()` */
  static readonly GetSchemaPath = '/db/schema';

  /**
   * Get the database schema.
   *
   * Retrieves the schema information of the currently active database connection for the authenticated user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSchema()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSchema$Response(params?: GetSchema$Params, context?: HttpContext): Observable<StrictHttpResponse<SchemaResponseDto>> {
    return getSchema(this.http, this.rootUrl, params, context);
  }

  /**
   * Get the database schema.
   *
   * Retrieves the schema information of the currently active database connection for the authenticated user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSchema$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSchema(params?: GetSchema$Params, context?: HttpContext): Observable<SchemaResponseDto> {
    return this.getSchema$Response(params, context).pipe(
      map((r: StrictHttpResponse<SchemaResponseDto>): SchemaResponseDto => r.body)
    );
  }

  /** Path part for operation `getActiveConnection()` */
  static readonly GetActiveConnectionPath = '/db/active';

  /**
   * Get the active database connection.
   *
   * Retrieves the currently active database connection for the authenticated user as a DTO.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getActiveConnection()` instead.
   *
   * This method doesn't expect any request body.
   */
  getActiveConnection$Response(params?: GetActiveConnection$Params, context?: HttpContext): Observable<StrictHttpResponse<DbConnectionResponse>> {
    return getActiveConnection(this.http, this.rootUrl, params, context);
  }

  /**
   * Get the active database connection.
   *
   * Retrieves the currently active database connection for the authenticated user as a DTO.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getActiveConnection$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getActiveConnection(params?: GetActiveConnection$Params, context?: HttpContext): Observable<DbConnectionResponse> {
    return this.getActiveConnection$Response(params, context).pipe(
      map((r: StrictHttpResponse<DbConnectionResponse>): DbConnectionResponse => r.body)
    );
  }

  /** Path part for operation `deleteConnection()` */
  static readonly DeleteConnectionPath = '/db/{id}';

  /**
   * Delete a saved database connection.
   *
   * Deletes a database connection previously saved by the authenticated user. If the connection is currently active, it will be deactivated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteConnection()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteConnection$Response(params: DeleteConnection$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return deleteConnection(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a saved database connection.
   *
   * Deletes a database connection previously saved by the authenticated user. If the connection is currently active, it will be deactivated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteConnection$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteConnection(params: DeleteConnection$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.deleteConnection$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
