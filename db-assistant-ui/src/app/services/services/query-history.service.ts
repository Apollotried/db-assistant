/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { queryHistory } from '../fn/query-history/query-history';
import { QueryHistory$Params } from '../fn/query-history/query-history';
import { QueryHistoryResponseDto } from '../models/query-history-response-dto';


/**
 * Retrieve query execution history for the authenticated user
 */
@Injectable({ providedIn: 'root' })
export class QueryHistoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `queryHistory()` */
  static readonly QueryHistoryPath = '/history';

  /**
   * Get query execution history.
   *
   * Retrieves the query execution history for the authenticated user. Includes details such as query text, execution time, query type, and connection name.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `queryHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  queryHistory$Response(params?: QueryHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<QueryHistoryResponseDto>>> {
    return queryHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * Get query execution history.
   *
   * Retrieves the query execution history for the authenticated user. Includes details such as query text, execution time, query type, and connection name.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `queryHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  queryHistory(params?: QueryHistory$Params, context?: HttpContext): Observable<Array<QueryHistoryResponseDto>> {
    return this.queryHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<QueryHistoryResponseDto>>): Array<QueryHistoryResponseDto> => r.body)
    );
  }

}
