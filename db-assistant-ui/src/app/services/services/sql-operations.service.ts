/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { executeSql } from '../fn/sql-operations/execute-sql';
import { ExecuteSql$Params } from '../fn/sql-operations/execute-sql';
import { generateSql } from '../fn/sql-operations/generate-sql';
import { GenerateSql$Params } from '../fn/sql-operations/generate-sql';
import { QueryResultDto } from '../models/query-result-dto';
import { SqlResponseDto } from '../models/sql-response-dto';


/**
 * Endpoints to generate and execute SQL queries
 */
@Injectable({ providedIn: 'root' })
export class SqlOperationsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `generateSql()` */
  static readonly GenerateSqlPath = '/sql/generate';

  /**
   * Generate SQL from a natural language question.
   *
   * Takes a plain-language question and converts it into an SQL query using the active database connection.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `generateSql()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateSql$Response(params: GenerateSql$Params, context?: HttpContext): Observable<StrictHttpResponse<SqlResponseDto>> {
    return generateSql(this.http, this.rootUrl, params, context);
  }

  /**
   * Generate SQL from a natural language question.
   *
   * Takes a plain-language question and converts it into an SQL query using the active database connection.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `generateSql$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateSql(params: GenerateSql$Params, context?: HttpContext): Observable<SqlResponseDto> {
    return this.generateSql$Response(params, context).pipe(
      map((r: StrictHttpResponse<SqlResponseDto>): SqlResponseDto => r.body)
    );
  }

  /** Path part for operation `executeSql()` */
  static readonly ExecuteSqlPath = '/sql/execute';

  /**
   * Execute a raw SQL query.
   *
   * Runs the given SQL query on the active database connection and returns structured results.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `executeSql()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  executeSql$Response(params: ExecuteSql$Params, context?: HttpContext): Observable<StrictHttpResponse<QueryResultDto>> {
    return executeSql(this.http, this.rootUrl, params, context);
  }

  /**
   * Execute a raw SQL query.
   *
   * Runs the given SQL query on the active database connection and returns structured results.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `executeSql$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  executeSql(params: ExecuteSql$Params, context?: HttpContext): Observable<QueryResultDto> {
    return this.executeSql$Response(params, context).pipe(
      map((r: StrictHttpResponse<QueryResultDto>): QueryResultDto => r.body)
    );
  }

}
