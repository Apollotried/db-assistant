/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ChatMessageResponseDto } from '../models/chat-message-response-dto';
import { clearChat } from '../fn/chat-message-controller/clear-chat';
import { ClearChat$Params } from '../fn/chat-message-controller/clear-chat';
import { getMessages } from '../fn/chat-message-controller/get-messages';
import { GetMessages$Params } from '../fn/chat-message-controller/get-messages';

@Injectable({ providedIn: 'root' })
export class ChatMessageControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMessages()` */
  static readonly GetMessagesPath = '/messages';

  /**
   * Get chat messages.
   *
   * Retrieves all chat messages for the currently active database connection of the authenticated user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessages$Response(params?: GetMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ChatMessageResponseDto>>> {
    return getMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * Get chat messages.
   *
   * Retrieves all chat messages for the currently active database connection of the authenticated user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessages(params?: GetMessages$Params, context?: HttpContext): Observable<Array<ChatMessageResponseDto>> {
    return this.getMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ChatMessageResponseDto>>): Array<ChatMessageResponseDto> => r.body)
    );
  }

  /** Path part for operation `clearChat()` */
  static readonly ClearChatPath = '/messages';

  /**
   * Clear chat messages.
   *
   * Deletes all chat messages for the currently active database connection of the authenticated user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clearChat()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearChat$Response(params?: ClearChat$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clearChat(this.http, this.rootUrl, params, context);
  }

  /**
   * Clear chat messages.
   *
   * Deletes all chat messages for the currently active database connection of the authenticated user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clearChat$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearChat(params?: ClearChat$Params, context?: HttpContext): Observable<void> {
    return this.clearChat$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
