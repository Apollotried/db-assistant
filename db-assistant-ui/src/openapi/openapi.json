{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenApi specification - marouane",
    "description": "OpenApi documentation for the db-assistant project with spring security",
    "contact": {
      "name": "marouane",
      "email": "marouaneyazza@gmail.com"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api/v1",
      "description": "Local env"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints for user registration and login"
    },
    {
      "name": "SQL Operations",
      "description": "Endpoints to generate and execute SQL queries"
    },
    {
      "name": "Query History",
      "description": "Retrieve query execution history for the authenticated user"
    },
    {
      "name": "Database Connections",
      "description": "Manage and activate user database connections"
    }
  ],
  "paths": {
    "/sql/generate": {
      "post": {
        "tags": [
          "SQL Operations"
        ],
        "summary": "Generate SQL from a natural language question",
        "description": "Takes a plain-language question and converts it into an SQL query using the active database connection.",
        "operationId": "generateSql",
        "requestBody": {
          "description": "Natural language question to generate SQL",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "Show all customers who spent more than 1000 last month"
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/sql/execute": {
      "post": {
        "tags": [
          "SQL Operations"
        ],
        "summary": "Execute a raw SQL query",
        "description": "Runs the given SQL query on the active database connection and returns structured results.",
        "operationId": "executeSql",
        "requestBody": {
          "description": "SQL query string to execute on the active database connection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlRequest"
              },
              "examples": {
                "Select example": {
                  "description": "Select example",
                  "value": {
                    "sql": "SELECT * FROM customers WHERE total_spent > 1000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/db": {
      "get": {
        "tags": [
          "Database Connections"
        ],
        "summary": "List saved database connections",
        "description": "Retrieves all database connections saved by the authenticated user. Does not include passwords, but contains metadata such as name, host, port, and type.",
        "operationId": "listConnections",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DbConnectionResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Database Connections"
        ],
        "summary": "Create and activate a database connection",
        "description": "Stores a new database connection configuration for the authenticated user and immediately activates it.",
        "operationId": "createAndActivateConnection",
        "requestBody": {
          "description": "Database connection details for creating and activating a connection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbConnectionRequest"
              },
              "example": {
                "name": "MyPostgresDB",
                "dbType": "postgresql",
                "host": "localhost",
                "port": 5432,
                "database": "db-assistant",
                "username": "user",
                "password": "password"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Connected and saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid connection details or connection failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbConnectionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbConnectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/db/{id}/activate": {
      "post": {
        "tags": [
          "Database Connections"
        ],
        "summary": "Activate a saved database connection",
        "description": "Activates a database connection previously saved by the authenticated user. If another connection is already active, it will be replaced.",
        "operationId": "activateConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbConnectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/db/test": {
      "post": {
        "tags": [
          "Database Connections"
        ],
        "summary": "Test a database connection",
        "description": "Tests whether the provided database connection details are correct and the database is reachable.",
        "operationId": "testConnection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DbConnectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestConnectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new user",
        "description": "Accepts registration details and creates a new account.",
        "operationId": "register",
        "requestBody": {
          "description": "Registration details including firstName, lastName, email, and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              },
              "example": {
                "firstName": "John",
                "lastName": "Doe",
                "email": "john.doe@example.com",
                "password": "strongPassword123"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/auth/authenticate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate a user",
        "description": "Validates credentials and returns a JWT token on success.",
        "operationId": "authenticate",
        "requestBody": {
          "description": "User credentials including email and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              },
              "example": {
                "email": "john.doe@example.com",
                "password": "strongPassword123"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/messages": {
      "get": {
        "tags": [
          "chat-message-controller"
        ],
        "summary": "Get chat messages",
        "description": "Retrieves all chat messages for the currently active database connection of the authenticated user.",
        "operationId": "getMessages",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMessageResponseDto"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chat-message-controller"
        ],
        "summary": "Clear chat messages",
        "description": "Deletes all chat messages for the currently active database connection of the authenticated user.",
        "operationId": "clearChat",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/history": {
      "get": {
        "tags": [
          "Query History"
        ],
        "summary": "Get query execution history",
        "description": "Retrieves the query execution history for the authenticated user. Includes details such as query text, execution time, query type, and connection name.",
        "operationId": "queryHistory",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryHistoryResponseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/db/schema": {
      "get": {
        "tags": [
          "Database Connections"
        ],
        "summary": "Get the database schema",
        "description": "Retrieves the schema information of the currently active database connection for the authenticated user.",
        "operationId": "getSchema",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/db/active": {
      "get": {
        "tags": [
          "Database Connections"
        ],
        "summary": "Get the active database connection",
        "description": "Retrieves the currently active database connection for the authenticated user as a DTO.",
        "operationId": "getActiveConnection",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbConnectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/db/{id}": {
      "delete": {
        "tags": [
          "Database Connections"
        ],
        "summary": "Delete a saved database connection",
        "description": "Deletes a database connection previously saved by the authenticated user. If the connection is currently active, it will be deactivated.",
        "operationId": "deleteConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SqlResponseDto": {
        "type": "object",
        "properties": {
          "sql": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "SqlRequest": {
        "type": "object",
        "properties": {
          "sql": {
            "type": "string"
          }
        }
      },
      "QueryResultDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rowCount": {
            "type": "integer",
            "format": "int32"
          },
          "queryType": {
            "type": "string"
          },
          "affectedRows": {
            "type": "integer",
            "format": "int32"
          },
          "aggregateResult": {
            "type": "object",
            "additionalProperties": {}
          },
          "aggregateQuery": {
            "type": "boolean"
          }
        }
      },
      "DbConnectionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "dbType": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "database": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "DbConnectionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "dbType": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "database": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "TestConnectionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RegistrationRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "maxLength": 2147483647,
            "minLength": 8
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName"
        ]
      },
      "AuthenticationRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "maxLength": 2147483647,
            "minLength": 8
          }
        },
        "required": [
          "email"
        ]
      },
      "AuthenticationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "ChatMessageResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "sender": {
            "type": "string",
            "enum": [
              "USER",
              "ASSISTANT"
            ]
          },
          "content": {
            "type": "string"
          },
          "sentAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "QueryHistoryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "query": {
            "type": "string"
          },
          "queryTime": {
            "type": "string",
            "format": "date-time"
          },
          "queryType": {
            "type": "string",
            "enum": [
              "SELECT",
              "INSERT",
              "UPDATE",
              "DELETE",
              "OTHER"
            ]
          },
          "connectionName": {
            "type": "string"
          }
        }
      },
      "SchemaResponseDto": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT auth description",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
